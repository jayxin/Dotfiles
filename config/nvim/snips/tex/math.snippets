# See also :h UltiSnips-interpolation and UltiSnips-custom-context-snippets
# Applications:
# 1. making certain snippets expand only when the trigger is typed in LaTeX
# math environments, which is called custom context expansion.
# 2. Accessing characters captured by a regular expression trigger's capture
# group.
# You will need GitHub user lervag's VimTeX plugin for math-context expansion.
# This plugin provides the user with the function vimtex#syntax#in_mathzone(),
# which returns 1 if the cursor is inside a LaTeX math zone and 0 otherwise.
# This function isn't explicitly mentioned in its documentation, but you can
# find it in the VimTeX source code at vimtex/atuoload/vimtex/syntax.vim.

# Inclue this code block at the top of a *.snippets file.
global !p
def math():
  return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal
# then place 'context "math()"'above any snippets you want to expand only in math mode

# This will not conflict with regular text like offer.
context "math()"
snippet ff "The LaTeX \frac{}{} command" Ai
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet sb "Sub-script" Ai
_{$1}$0
endsnippet

context "math()"
snippet sp "Super-script" Ai
^{$1}$0
endsnippet

context "math()"
snippet sum "Summation" Ai
\\sum_{$1}^{$2}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "Auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

# When you wrap parts of a regular expression in a gropu using parenthesis,
# you can use them in the expansions of the snippet via match.group(i) in Py.
context "math()"
snippet '([A-Za-z])_(\d\d)' "Auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# //
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# 3/ 4\pi^2/ (1 + 2 + 3)/
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

# (1+(2+3)/) (1+(2+3))/
priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
    if stripped[i] == ')': depth += 1
    if stripped[i] == '(': depth -= 1
    if depth == 0: break;
    i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i + 1:-1] + "}"
`{$1}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

# sympy integrate(tan(x), x) sympy
# sympy 1+1 sympy<Tab>
#snippet sympy "sympy block" w
#sympy $1 sympy$0
#endsnippet
#
#priority 10000
#snippet 'sympy(.*)sympy' "evaluate sympy" wr
#`!p
#from sympy import *
#x, y, z, t = symbols('x y z t')
#k, m, n = symbols('k m n', integer=True)
#f, g, h = symbols('f g h', cls=Function)
#init_printing()
#snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
#.replace('^', '**') \
#.replace('{', '(') \
#.replace('}', ')') + ')')
#`
#endsnippet

# math Integrate[Tan[x, x]] math
# priority 1000
# snippet math "mathematica block" w
# math $1 math$0
# endsnippet

# priority 10000
# snippet 'math(.*)math' "evaluate mathematica" wr
# `!p
# import subprocess
# code = 'ToString[' + match.group(1) + ', TeXForm]'
# snip.rv = subprocess.check_output(['wolframscript', '-code', code])
# `
# endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

# postfix
# xbar<Tab> iff \overline{x}
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv = match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv = match.group(1)`}
endsnippet

# v,. or v.,
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv = match.group(1)`}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

context "math()"
snippet iff "iff" iA
\iff $0
endsnippet

snippet => "implies" iA
\implies $0
endsnippet

snippet =< "implied by" iA
\impliedby $0
endsnippet

snippet HH "H" iA
\mathbb{H}
endsnippet

snippet DD "D" iA
\mathbb{D}
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq $0
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor $0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}}
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le $0
endsnippet

snippet >= "geq" iA
\ge $0
endsnippet

context "math()"
snippet EE "exists" iA
\exists $0
endsnippet

context "math()"
snippet AA "forall" iA
\forall $0
endsnippet

snippet R0+ "R0+" iA
\\R_0^+ $0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell $0
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla $0
endsnippet

context "math()"
snippet xx "cross" iA
\times $0
endsnippet

priority 100
snippet ** "cdot" iA
\cdot $0
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to $0
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow $0
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto $0
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg $0
endsnippet

snippet << "<<" iA
\ll $0
endsnippet

snippet sm "~" iA
\sim $0
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

snippet || "mid" iA
 \mid
endsnippet

context "math()"
snippet cc "subset" Ai
\subset $0
endsnippet

snippet notin "not in " iA
\not\in $0
endsnippet

context "math()"
snippet inn "in " iA
\in $0
endsnippet

snippet NN "n" iA
\N $0
endsnippet

snippet Nn "cap" iA
\cap $0
endsnippet

snippet UU "cup" iA
\cup $0
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" iA
\emptyset
endsnippet

snippet RR "real" iA
\R
endsnippet

snippet QQ "Q" iA
\Q
endsnippet

snippet ZZ "Z" iA
\Z
endsnippet

snippet <! "normal" iA
\triangleleft
endsnippet

snippet <> "hokje" iA
\diamond
endsnippet

